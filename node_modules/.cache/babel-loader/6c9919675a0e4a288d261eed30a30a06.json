{"ast":null,"code":"var _jsxFileName = \"C:\\\\movie-app\\\\src\\\\content\\\\Portlet.js\";\nimport React, { forwardRef, useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { isFragment } from \"react-is\";\nexport const PortletHeaderIcon = forwardRef(({\n  className\n}, ref) => /*#__PURE__*/React.createElement(\"span\", {\n  ref: ref,\n  className: clsx(\"kt-portlet__head-icon\", className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }\n}));\nexport const PortletHeaderTitle = forwardRef(({\n  className,\n  ...props\n}, ref) =>\n/*#__PURE__*/\n// eslint-disable-next-line jsx-a11y/heading-has-content\nReact.createElement(\"h3\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"kt-portlet__head-title\", className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n})));\nexport const PortletHeaderToolbar = forwardRef(({\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"kt-portlet__head-toolbar\", className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }\n})));\nexport const PortletHeader = forwardRef(({\n  icon,\n  title,\n  toolbar,\n  className,\n  sticky = false,\n  labelRef,\n  ...props\n}, ref) => {\n  const [top, setTop] = useState(0);\n  const [windowHeight, setWindowHeight] = useState(0);\n  useEffect(() => {\n    handleResize();\n\n    function handleResize() {\n      setWindowHeight(window.innerWidth);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n  useEffect(() => {\n    // Skip if sticky is disabled or on initial render when we don't know about window height.\n    if (!sticky || windowHeight === 0) {\n      return;\n    }\n\n    const headerElement = document.querySelector(\".kt-header\");\n    const subheaderElement = document.querySelector(\".kt-subheader\");\n    const headerMobileElement = document.querySelector(\".kt-header-mobile\");\n    let nextMarginTop = 0; // mobile header\n\n    if (window.getComputedStyle(headerElement).height === \"0px\") {\n      nextMarginTop = headerMobileElement.offsetHeight;\n    } else {\n      // desktop header\n      if (document.body.classList.contains(\"kt-header--minimize-topbar\")) {\n        // hardcoded minimized header height\n        nextMarginTop = 60;\n      } else {\n        // normal fixed header\n        if (document.body.classList.contains(\"kt-header--fixed\")) {\n          nextMarginTop += headerElement.offsetHeight;\n        }\n\n        if (document.body.classList.contains(\"kt-subheader--fixed\")) {\n          nextMarginTop += subheaderElement.offsetHeight;\n        }\n      }\n    }\n\n    setTop(nextMarginTop);\n  }, [sticky, windowHeight]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: \"kt-portlet__head\",\n    style: !sticky ? undefined : {\n      top,\n      position: \"sticky\",\n      backgroundColor: \"#fff\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, title != null && /*#__PURE__*/React.createElement(\"div\", {\n    ref: labelRef,\n    className: clsx(\"kt-portlet__head-label\", className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, icon,\n  /* Wrap string and fragments in PortletHeaderTitle */\n  typeof title === \"string\" || isFragment(title) ? /*#__PURE__*/React.createElement(PortletHeaderTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, title) : title), toolbar);\n});\nexport const PortletBody = forwardRef(({\n  fit,\n  fluid,\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"kt-portlet__body\", {\n    \"kt-portlet__body--fit\": fit,\n    \"kt-portlet__body--fluid\": fluid\n  }, className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }\n})));\nexport const PortletFooter = forwardRef(({\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"kt-portlet__foot\", className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 3\n  }\n})));\nexport const Portlet = forwardRef(({\n  fluidHeight,\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"kt-portlet\", {\n    \"kt-portlet--height-fluid\": fluidHeight\n  }, className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }\n}))); // Set display names for debugging.\n\nif (process.env.NODE_ENV !== \"production\") {\n  Portlet.displayName = \"Portlet\";\n  PortletHeader.displayName = \"PortletHeader\";\n  PortletHeaderIcon.displayName = \"PortletHeaderIcon\";\n  PortletHeaderTitle.displayName = \"PortletHeaderTitle\";\n  PortletHeaderToolbar.displayName = \"PortletHeaderToolbar\";\n  PortletBody.displayName = \"PortletBody\";\n  PortletFooter.displayName = \"PortletFooter\";\n}","map":{"version":3,"sources":["C:/movie-app/src/content/Portlet.js"],"names":["React","forwardRef","useEffect","useState","clsx","isFragment","PortletHeaderIcon","className","ref","PortletHeaderTitle","props","PortletHeaderToolbar","PortletHeader","icon","title","toolbar","sticky","labelRef","top","setTop","windowHeight","setWindowHeight","handleResize","window","innerWidth","addEventListener","removeEventListener","headerElement","document","querySelector","subheaderElement","headerMobileElement","nextMarginTop","getComputedStyle","height","offsetHeight","body","classList","contains","undefined","position","backgroundColor","PortletBody","fit","fluid","PortletFooter","Portlet","fluidHeight","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["import React, { forwardRef, useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { isFragment } from \"react-is\";\r\n\r\nexport const PortletHeaderIcon = forwardRef(({ className }, ref) => (\r\n  <span ref={ref} className={clsx(\"kt-portlet__head-icon\", className)} />\r\n));\r\n\r\nexport const PortletHeaderTitle = forwardRef(({ className, ...props }, ref) => (\r\n  // eslint-disable-next-line jsx-a11y/heading-has-content\r\n  <h3\r\n    {...props}\r\n    ref={ref}\r\n    className={clsx(\"kt-portlet__head-title\", className)}\r\n  />\r\n));\r\n\r\nexport const PortletHeaderToolbar = forwardRef(\r\n  ({ className, ...props }, ref) => (\r\n    <div\r\n      {...props}\r\n      ref={ref}\r\n      className={clsx(\"kt-portlet__head-toolbar\", className)}\r\n    />\r\n  )\r\n);\r\n\r\nexport const PortletHeader = forwardRef(\r\n  (\r\n    { icon, title, toolbar, className, sticky = false, labelRef, ...props },\r\n    ref\r\n  ) => {\r\n    const [top, setTop] = useState(0);\r\n    const [windowHeight, setWindowHeight] = useState(0);\r\n\r\n    useEffect(() => {\r\n      handleResize();\r\n\r\n      function handleResize() {\r\n        setWindowHeight(window.innerWidth);\r\n      }\r\n\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      return () => {\r\n        window.removeEventListener(\"resize\", handleResize);\r\n      };\r\n    });\r\n\r\n    useEffect(() => {\r\n      // Skip if sticky is disabled or on initial render when we don't know about window height.\r\n      if (!sticky || windowHeight === 0) {\r\n        return;\r\n      }\r\n\r\n      const headerElement = document.querySelector(\".kt-header\");\r\n      const subheaderElement = document.querySelector(\".kt-subheader\");\r\n      const headerMobileElement = document.querySelector(\".kt-header-mobile\");\r\n\r\n      let nextMarginTop = 0;\r\n\r\n      // mobile header\r\n      if (window.getComputedStyle(headerElement).height === \"0px\") {\r\n        nextMarginTop = headerMobileElement.offsetHeight;\r\n      } else {\r\n        // desktop header\r\n        if (document.body.classList.contains(\"kt-header--minimize-topbar\")) {\r\n          // hardcoded minimized header height\r\n          nextMarginTop = 60;\r\n        } else {\r\n          // normal fixed header\r\n          if (document.body.classList.contains(\"kt-header--fixed\")) {\r\n            nextMarginTop += headerElement.offsetHeight;\r\n          }\r\n\r\n          if (document.body.classList.contains(\"kt-subheader--fixed\")) {\r\n            nextMarginTop += subheaderElement.offsetHeight;\r\n          }\r\n        }\r\n      }\r\n\r\n      setTop(nextMarginTop);\r\n    }, [sticky, windowHeight]);\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"kt-portlet__head\"\r\n        style={\r\n          !sticky\r\n            ? undefined\r\n            : { top, position: \"sticky\", backgroundColor: \"#fff\" }\r\n        }\r\n      >\r\n        {title != null && (\r\n          <div\r\n            ref={labelRef}\r\n            className={clsx(\"kt-portlet__head-label\", className)}\r\n          >\r\n            {icon}\r\n\r\n            {/* Wrap string and fragments in PortletHeaderTitle */\r\n            typeof title === \"string\" || isFragment(title) ? (\r\n              <PortletHeaderTitle>{title}</PortletHeaderTitle>\r\n            ) : (\r\n              title\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {toolbar}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport const PortletBody = forwardRef(\r\n  ({ fit, fluid, className, ...props }, ref) => (\r\n    <div\r\n      {...props}\r\n      ref={ref}\r\n      className={clsx(\r\n        \"kt-portlet__body\",\r\n        {\r\n          \"kt-portlet__body--fit\": fit,\r\n          \"kt-portlet__body--fluid\": fluid\r\n        },\r\n        className\r\n      )}\r\n    />\r\n  )\r\n);\r\n\r\nexport const PortletFooter = forwardRef(({ className, ...props }, ref) => (\r\n  <div {...props} ref={ref} className={clsx(\"kt-portlet__foot\", className)} />\r\n));\r\n\r\nexport const Portlet = forwardRef(\r\n  ({ fluidHeight, className, ...props }, ref) => (\r\n    <div\r\n      {...props}\r\n      ref={ref}\r\n      className={clsx(\r\n        \"kt-portlet\",\r\n        { \"kt-portlet--height-fluid\": fluidHeight },\r\n        className\r\n      )}\r\n    />\r\n  )\r\n);\r\n\r\n// Set display names for debugging.\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  Portlet.displayName = \"Portlet\";\r\n\r\n  PortletHeader.displayName = \"PortletHeader\";\r\n  PortletHeaderIcon.displayName = \"PortletHeaderIcon\";\r\n  PortletHeaderTitle.displayName = \"PortletHeaderTitle\";\r\n  PortletHeaderToolbar.displayName = \"PortletHeaderToolbar\";\r\n\r\n  PortletBody.displayName = \"PortletBody\";\r\n  PortletFooter.displayName = \"PortletFooter\";\r\n}\r\n"]},"metadata":{},"sourceType":"module"}